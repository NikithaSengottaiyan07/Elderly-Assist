"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssistantDrawerUI = void 0;
var _VoicifyAssistant = require("./VoicifyAssistant");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ReactNativeSoundTTSProvider = require("./ReactNativeSoundTTSProvider");
var _ReactNativeVoiceSTTProvider = require("./ReactNativeVoiceSTTProvider");
var _SpeakingAnimation = require("../components/SpeakingAnimation");
var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));
var _reactNativeMarkdownDisplay = _interopRequireDefault(require("react-native-markdown-display"));
var _reactNativeInappbrowserReborn = require("react-native-inappbrowser-reborn");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
let expoTextToSpeech;
let reactNativeVoice;
let myAssistant;
let assistantMessages = [];
let inputMessage;
const noInputError = "7/No match";
const AssistantDrawerUI = props => {
  var _props$toolBar, _assistantStateRef$cu8, _props$header, _props$header2, _props$header3, _props$header4, _props$header5, _props$header6, _props$header7, _props$header8, _props$header9, _props$header10, _props$header11, _props$body, _props$body2, _props$body3, _props$body4, _props$body5, _props$body6, _props$body7, _props$body8, _props$body9, _props$body10, _props$toolBar2, _props$toolBar3, _props$toolBar4, _props$toolBar5, _props$toolBar6, _props$toolBar7, _props$toolBar8, _props$toolBar9, _props$toolBar10, _props$header12, _props$toolBar11, _props$toolBar12, _props$toolBar13, _props$toolBar14, _props$toolBar15, _props$toolBar16, _props$toolBar17, _props$toolBar18, _props$toolBar19, _props$toolBar20, _props$toolBar21, _props$toolBar22, _props$toolBar23, _props$toolBar24, _props$toolBar25, _props$toolBar26, _props$toolBar27, _props$toolBar28, _props$toolBar29, _props$toolBar30, _props$toolBar31, _props$toolBar32, _props$toolBar33, _props$toolBar34, _props$toolBar35, _props$toolBar36, _props$toolBar37, _props$toolBar38, _props$toolBar39, _props$toolBar40, _props$toolBar41, _props$toolBar42, _props$toolBar43, _props$toolBar44, _props$toolBar45;
  const [assistantIsListening, setAssistantIsListening] = (0, _react.useState)();
  const [assistantState, setAssistantState] = (0, _react.useState)(props.initializeWithWelcomeMessage ? "Conversation" : "Start");
  const [assistantConversation, setAssistantConversation] = (0, _react.useState)();
  const [assistantHints, setAssistantHints] = (0, _react.useState)();
  const [spokenText, setSpokenText] = (0, _react.useState)();
  const [shouldEndSession, setShouldEndSession] = (0, _react.useState)(true);
  const [isUsingSpeech, setIsUsingSpeech] = (0, _react.useState)(false);
  const [inputText, setInputText] = (0, _react.useState)('');
  const [isKeyboardActive, setIsKeyboardActive] = (0, _react.useState)(false);
  const [isRecoginzing, setIsRecognizing] = (0, _react.useState)(false);
  const [inputType, setInputType] = (0, _react.useState)(props.useVoiceInput && !props.initializeWithText ? 'Speech' : 'Text');
  const [isLandscape, setIsLandscape] = (0, _react.useState)(false);
  const isRecognizingRef = (0, _react.useRef)();
  const isKeyboardActiveRef = (0, _react.useRef)();
  const isUsingSpeechRef = (0, _react.useRef)();
  const assistantIsListeningRef = (0, _react.useRef)();
  const messagesRef = (0, _react.useRef)();
  const assistantStateRef = (0, _react.useRef)();
  const shouldEndSessionRef = (0, _react.useRef)();
  const scrollViewRef = (0, _react.useRef)();
  const assistantHintsRef = (0, _react.useRef)();
  const inputTypeRef = (0, _react.useRef)();
  assistantHintsRef.current = assistantHints;
  isRecognizingRef.current = isRecoginzing;
  isKeyboardActiveRef.current = isKeyboardActive;
  isUsingSpeechRef.current = isUsingSpeech;
  assistantIsListeningRef.current = assistantIsListening;
  messagesRef.current = assistantConversation;
  assistantStateRef.current = assistantState;
  shouldEndSessionRef.current = shouldEndSession;
  inputTypeRef.current = inputType;
  (0, _react.useEffect)(() => {
    var _assistantStateRef$cu;
    if (isKeyboardActiveRef.current || (_assistantStateRef$cu = assistantStateRef.current) !== null && _assistantStateRef$cu !== void 0 && _assistantStateRef$cu.includes('Conversation') && isUsingSpeechRef.current) {
      if (scrollViewRef.current) {
        scrollViewRef.current.scrollToEnd({
          animated: true
        });
      }
    }
  }, [isKeyboardActiveRef.current, isUsingSpeechRef.current]);
  if (_reactNative.Platform.OS == "ios") {
    //use effect to time out if the user doesnt say anything on ios
    (0, _react.useEffect)(() => {
      if (assistantIsListeningRef.current) {
        setTimeout(() => {
          if (assistantIsListeningRef.current && !isRecognizingRef.current) {
            var _assistantStateRef$cu2;
            reactNativeVoice.stopListening();
            setAssistantIsListening(false);
            if ((_assistantStateRef$cu2 = assistantStateRef.current) !== null && _assistantStateRef$cu2 !== void 0 && _assistantStateRef$cu2.includes('Conversation')) {
              setAssistantState('Conversation Try Again');
            } else {
              setAssistantState('Try Again');
            }
          }
        }, 5000);
        setIsRecognizing(false);
      }
    }, [assistantIsListeningRef.current]);
  }
  const onModalShow = () => {
    _reactNative.Dimensions.addEventListener("change", () => {
      if (isOrientationLandscape()) {
        setIsLandscape(true);
      } else {
        setIsLandscape(false);
      }
    });
    _reactNative.Keyboard.addListener("keyboardDidHide", () => {
      setIsKeyboardActive(false);
    });
    _reactNative.Keyboard.addListener("keyboardDidShow", () => {
      setIsKeyboardActive(true);
    });
    expoTextToSpeech = new _ReactNativeSoundTTSProvider.ReactNativeSoundTTSProvider({
      appId: props.appId,
      appKey: props.appKey,
      locale: props.locale,
      provider: props.textToSpeechProvider,
      serverRootUrl: props.serverRootUrl,
      voice: props.voice
    });
    reactNativeVoice = new _ReactNativeVoiceSTTProvider.ReactNativeVoiceSTTProvider(props.locale);
    myAssistant = new _VoicifyAssistant.VoicifyAssistant({
      appId: props.appId,
      appKey: props.appKey,
      locale: props.locale,
      channel: props.channel,
      device: props.device,
      autoRunConversation: props.autoRunConversation,
      initializeWithWelcomeMessage: props.initializeWithWelcomeMessage,
      useOutputSpeech: props.useOutputSpeech,
      useVoiceInput: props.useVoiceInput,
      serverRootUrl: props.serverRootUrl
    }, expoTextToSpeech, reactNativeVoice);
    if (assistantConversation) {
      assistantMessages = [...assistantConversation];
    }
    setIsUsingSpeech(props.useVoiceInput && !props.initializeWithText ? true : false);
    setAssistantIsListening(false);
    setSpokenText('');
    props.initializeWithWelcomeMessage ? setAssistantState("Conversation") : setAssistantState('Start');
    setShouldEndSession(true);
    setSTTProperties();
    setAssistantProperties();
    if (!props.initializeWithText && !props.initializeWithWelcomeMessage && props.useVoiceInput) {
      reactNativeVoice.startListening();
    }
  };
  function isOrientationLandscape() {
    const dim = _reactNative.Dimensions.get("screen");
    return dim.width >= dim.height;
  }
  const setAssistantProperties = () => {
    myAssistant.clearHandlers();
    myAssistant.initializeAndStart();
    myAssistant.onResponseReceived(async res => {
      setSpokenText('');
      if (res.hints) {
        setAssistantHints([...res.hints]);
      } else {
        setAssistantHints([]);
      }
      if (!res.endSession && shouldEndSessionRef.current) {
        //if we are starting a multi turn conversation
        setShouldEndSession(false);
        setAssistantState('Conversation');
        if (inputMessage) {
          assistantMessages.push({
            text: inputMessage,
            origin: 'Sent'
          });
          inputMessage = '';
        }
        if (res.outputSpeech && res.displayText) {
          assistantMessages.push({
            text: res.displayText,
            origin: 'Received'
          });
          setAssistantConversation([...assistantMessages]);
        }
      } else if (!res.endSession && res.displayText && !shouldEndSessionRef.current) {
        // if we are continuing a multi turn conversation
        if (inputMessage) {
          assistantMessages.push({
            text: inputMessage,
            origin: 'Sent'
          });
          inputMessage = '';
        }
        if (res.outputSpeech) {
          assistantMessages.push({
            text: res.displayText,
            origin: 'Received'
          });
          setAssistantConversation([...assistantMessages]);
        }
      } else {
        var _assistantStateRef$cu3;
        // if we are ending a multi turn conversation
        setShouldEndSession(true);
        if ((_assistantStateRef$cu3 = assistantStateRef.current) !== null && _assistantStateRef$cu3 !== void 0 && _assistantStateRef$cu3.includes('Conversation')) {
          if (inputMessage) {
            assistantMessages.push({
              text: inputMessage,
              origin: 'Sent'
            });
            inputMessage = '';
          }
          if (res.outputSpeech && res.displayText) {
            assistantMessages.push({
              text: res.displayText,
              origin: 'Received'
            });
            setAssistantConversation([...assistantMessages]);
            setAssistantState('Conversation Ended');
          }
        }
      }
    });
    myAssistant.startNewSession();
    props.effects.forEach(effect => {
      myAssistant.onEffect(effect, async data => {
        if (data) {
          props.onEffect(effect, data);
        }
      });
    });
  };
  const setSTTProperties = async () => {
    //the STT provider is initialized in the assistant class
    reactNativeVoice.clearHandlers();
    reactNativeVoice.addFinishListener(async e => {
      if (e) {
        var _assistantStateRef$cu4;
        if (assistantConversation) {
          assistantMessages = [...assistantConversation];
        }
        if ((_assistantStateRef$cu4 = assistantStateRef.current) !== null && _assistantStateRef$cu4 !== void 0 && _assistantStateRef$cu4.includes("Conversation")) {
          setAssistantState('Conversation');
          setSpokenText(e);
          inputMessage = e;
          await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
        } else {
          setAssistantState('Understood');
          setSpokenText(e);
          inputMessage = e;
          await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
        }
      }
    });
    reactNativeVoice.addPartialListener(async e => {
      if (e) {
        setIsRecognizing(true);
        setSpokenText(e);
      }
    });
    reactNativeVoice.addStartListener(async () => {
      if (assistantStateRef.current) {
        if (assistantStateRef.current.includes('Conversation')) {
          setAssistantState('Conversation');
        } else {
          setAssistantState('Start');
        }
      }
      setAssistantIsListening(true);
    });
    reactNativeVoice.addEndListener(async () => {
      setAssistantIsListening(false);
    });
    reactNativeVoice.addErrorListener(async e => {
      if (e == noInputError) {
        var _assistantStateRef$cu5;
        if ((_assistantStateRef$cu5 = assistantStateRef.current) !== null && _assistantStateRef$cu5 !== void 0 && _assistantStateRef$cu5.includes('Conversation')) {
          setAssistantIsListening(false);
          setAssistantState('Conversation Try Again');
        } else {
          setAssistantIsListening(false);
          setAssistantState('Try Again');
        }
      }
    });
    reactNativeVoice.addVolumeListener(async e => {
      if (assistantStateRef.current) {
        if (assistantStateRef.current.includes('Conversation')) {
          if (e > 2) {
            if (assistantIsListeningRef.current) {
              setAssistantState('Conversation Speaking');
            }
          }
        } else {
          if (!assistantStateRef.current.includes('Try Again')) {
            if (e > 2) {
              if (assistantIsListeningRef.current) {
                setAssistantState('Speaking');
              }
            }
          }
        }
      }
    });
  };
  const onClosePress = () => {
    props.onModalClosed();
  };
  const onModalHide = () => {
    var _expoTextToSpeech;
    if (props.clearConversationOnClose) {
      props.clearConversationOnClose && setAssistantConversation([]);
      assistantMessages = [];
    }
    props.initializeWithWelcomeMessage ? setAssistantState("Conversation") : setAssistantState('Start');
    reactNativeVoice.destroyInstance();
    reactNativeVoice.stopListening();
    (_expoTextToSpeech = expoTextToSpeech) === null || _expoTextToSpeech === void 0 || _expoTextToSpeech.stop();
  };
  const onTextInputClicked = () => {
    setInputType('Text');
    setIsUsingSpeech(false);
    if (assistantIsListeningRef.current) {
      reactNativeVoice.stopListening();
      reactNativeVoice.destroyInstance();
      setAssistantIsListening(false);
    }
  };
  const onSpeechInputClicked = () => {
    var _expoTextToSpeech2;
    (_expoTextToSpeech2 = expoTextToSpeech) === null || _expoTextToSpeech2 === void 0 || _expoTextToSpeech2.stop();
    _reactNative.Keyboard.dismiss();
    setIsUsingSpeech(true);
    if (assistantIsListeningRef.current) {
      var _assistantStateRef$cu6;
      setAssistantIsListening(false);
      reactNativeVoice.stopListening();
      reactNativeVoice.destroyInstance();
      if ((_assistantStateRef$cu6 = assistantStateRef.current) !== null && _assistantStateRef$cu6 !== void 0 && _assistantStateRef$cu6.includes('Conversation')) {
        setAssistantState('Conversation Try Again');
      } else {
        setAssistantState('Try Again');
      }
    } else {
      reactNativeVoice.startListening();
    }
  };
  const onSendPressed = async () => {
    var _expoTextToSpeech3;
    (_expoTextToSpeech3 = expoTextToSpeech) === null || _expoTextToSpeech3 === void 0 || _expoTextToSpeech3.stop();
    _reactNative.Keyboard.dismiss();
    if (inputText) {
      var _assistantStateRef$cu7;
      if ((_assistantStateRef$cu7 = assistantStateRef.current) !== null && _assistantStateRef$cu7 !== void 0 && _assistantStateRef$cu7.includes("Conversation")) {
        setAssistantState('Conversation');
        inputMessage = inputText;
        setInputText('');
        await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
      } else {
        setAssistantState('Understood');
        inputMessage = inputText;
        setInputText('');
        await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
      }
    }
  };
  const openBrowser = async url => {
    await _reactNativeInappbrowserReborn.InAppBrowser.open(url);
  };
  const onLinkPressed = url => {
    if (url) {
      openBrowser(url);
    }
    return false;
  };
  const onHintClicked = async hint => {
    expoTextToSpeech.stop();
    reactNativeVoice.stopListening();
    reactNativeVoice.destroyInstance();
    setAssistantIsListening(false);
    inputMessage = hint;
    await myAssistant.makeTextRequest(hint, {}, inputTypeRef.current);
  };
  {/* //There is a bug with react native modal where if you dont supply this touchable opacity with activeOpacity 1 (IE: doesnt actually do anything), you cannot scroll without it */}
  return /*#__PURE__*/_react.default.createElement(_reactNativeModal.default, {
    propagateSwipe: true,
    onModalShow: onModalShow,
    isVisible: props.isModalOpen,
    onModalHide: onModalHide,
    animationIn: "slideInUp",
    avoidKeyboard: true,
    style: {
      borderRadius: 100,
      margin: 0,
      justifyContent: !assistantStateRef.current.includes('Conversation') ? 'flex-end' : 'flex-start',
      display: 'flex',
      flexDirection: 'column'
    },
    coverScreen: true
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      backgroundColor: ((_props$toolBar = props.toolBar) === null || _props$toolBar === void 0 ? void 0 : _props$toolBar.backgroundColor) ?? "#FFFFFF",
      display: 'flex',
      flexDirection: 'column',
      flex: (_assistantStateRef$cu8 = assistantStateRef.current) !== null && _assistantStateRef$cu8 !== void 0 && _assistantStateRef$cu8.includes('Conversation') ? 1 : !isUsingSpeechRef.current && isKeyboardActiveRef.current ? .4 : !isUsingSpeechRef.current && !isKeyboardActiveRef.current && !isLandscape ? .22 : !isUsingSpeechRef.current && !isKeyboardActiveRef.current && isLandscape ? .5 : 0,
      borderTopRightRadius: 20,
      borderTopLeftRadius: 20
    }
  }, assistantStateRef.current.includes('Conversation') && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'column',
      flex: 1
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
      backgroundColor: ((_props$header = props.header) === null || _props$header === void 0 ? void 0 : _props$header.backgroundColor) ?? "#FFFFFF",
      paddingLeft: ((_props$header2 = props.header) === null || _props$header2 === void 0 ? void 0 : _props$header2.paddingLeft) ?? 12,
      paddingRight: ((_props$header3 = props.header) === null || _props$header3 === void 0 ? void 0 : _props$header3.paddingRight) ?? 20,
      paddingTop: ((_props$header4 = props.header) === null || _props$header4 === void 0 ? void 0 : _props$header4.paddingTop) ?? 20,
      paddingBottom: ((_props$header5 = props.header) === null || _props$header5 === void 0 ? void 0 : _props$header5.paddingBottom) ?? 0
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'row',
      height: 60,
      justifyContent: 'flex-start',
      alignContent: 'center',
      alignItems: 'center'
    }
  }, ((_props$header6 = props.header) === null || _props$header6 === void 0 ? void 0 : _props$header6.assistantImage) && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      borderColor: props.header.assistantImageBorderColor ?? "#000000",
      borderWidth: props.header.assistantImageBorderWidth ?? 1,
      borderStyle: props.header.assistantImageBorderStyle ?? "solid",
      borderRadius: props.header.assistantImageBorderRadius ?? 30,
      padding: 4,
      backgroundColor: props.header.assistantImageBackgroundColor ?? "#FFFFFF"
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: {
      height: 30,
      width: 30
    },
    source: {
      uri: props.header.assistantImage
    }
  })), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      marginLeft: 8,
      color: ((_props$header7 = props.header) === null || _props$header7 === void 0 ? void 0 : _props$header7.assistantNameTextColor) ?? "#000000",
      fontSize: ((_props$header8 = props.header) === null || _props$header8 === void 0 ? void 0 : _props$header8.assistantNameFontSize) ?? 18,
      fontFamily: (_props$header9 = props.header) === null || _props$header9 === void 0 ? void 0 : _props$header9.assistantNameFontFamily,
      textAlign: 'center'
    }
  }, (_props$header10 = props.header) === null || _props$header10 === void 0 ? void 0 : _props$header10.assistantName)), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: {
      borderRadius: 30,
      width: 30,
      height: 30,
      alignSelf: 'center'
    },
    onPress: onClosePress
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: {
      height: 25,
      width: 25
    },
    source: {
      uri: ((_props$header11 = props.header) === null || _props$header11 === void 0 ? void 0 : _props$header11.closeAssistantButtonImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/a6de04bb-e572-4a55-8cd9-1a7628285829/delete-2.png"
    }
  }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 1,
      paddingTop: ((_props$body = props.body) === null || _props$body === void 0 ? void 0 : _props$body.paddingTop) ?? 0,
      paddingLeft: ((_props$body2 = props.body) === null || _props$body2 === void 0 ? void 0 : _props$body2.paddingLeft) ?? 16,
      paddingRight: ((_props$body3 = props.body) === null || _props$body3 === void 0 ? void 0 : _props$body3.paddingRight) ?? 16,
      paddingBottom: ((_props$body4 = props.body) === null || _props$body4 === void 0 ? void 0 : _props$body4.paddingBottom) ?? 12,
      backgroundColor: ((_props$body5 = props.body) === null || _props$body5 === void 0 ? void 0 : _props$body5.backgroundColor) ?? "#FFFFFF",
      display: 'flex',
      flexDirection: 'column',
      borderTopColor: ((_props$body6 = props.body) === null || _props$body6 === void 0 ? void 0 : _props$body6.borderTopColor) ?? "#CBCCD2",
      borderTopWidth: ((_props$body7 = props.body) === null || _props$body7 === void 0 ? void 0 : _props$body7.borderTopWidth) ?? 1,
      borderBottomColor: ((_props$body8 = props.body) === null || _props$body8 === void 0 ? void 0 : _props$body8.borderBottomColor) ?? "#CBCCD2",
      borderBottomWidth: ((_props$body9 = props.body) === null || _props$body9 === void 0 ? void 0 : _props$body9.borderBottomWidth) ?? 1,
      borderStyle: ((_props$body10 = props.body) === null || _props$body10 === void 0 ? void 0 : _props$body10.borderStyle) ?? "solid"
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, {
    ref: scrollViewRef,
    onContentSizeChange: () => scrollViewRef.current.scrollToEnd({
      animated: true
    })
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1
  }, messagesRef.current && messagesRef.current.map((message, idx) => {
    var _props$body11, _props$body12, _props$body13, _props$body14, _props$body15, _props$body16, _props$body17, _props$body18, _props$body19, _props$body20, _props$body21, _props$body22, _props$body23, _props$body24, _props$body25, _props$body26, _props$body27, _props$body28, _props$body29, _props$body30, _props$body31, _props$body32, _props$body33;
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      key: idx,
      style: {
        marginTop: 16,
        display: 'flex',
        flexDirection: 'row',
        justifyContent: message.origin == 'Received' ? 'flex-start' : 'flex-end'
      }
    }, message.origin == 'Received' && ((_props$body11 = props.body) === null || _props$body11 === void 0 ? void 0 : _props$body11.assistantImage) && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: {
        maxHeight: 30,
        maxWidth: 30,
        borderColor: props.body.aassistantImageBorderColor ?? "#000000",
        borderWidth: props.body.assistantImageBorderWidth ?? 1,
        borderStyle: props.body.assistantImageBorderStyle ?? "solid",
        borderRadius: props.body.assistantImageBorderRadius ?? 30,
        padding: 4,
        backgroundColor: props.body.assistantImageBackgroundColor ?? "#FFFFFF",
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
      style: {
        height: 20,
        width: 20
      },
      source: {
        uri: props.body.assistantImage
      }
    })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: {
        maxWidth: "85%",
        marginLeft: message.origin == 'Received' ? 8 : 0,
        marginTop: 16,
        backgroundColor: message.origin == 'Sent' ? ((_props$body12 = props.body) === null || _props$body12 === void 0 ? void 0 : _props$body12.messageSentBackgroundColor) ?? "rgba(0, 0, 0, 0.5)" : ((_props$body13 = props.body) === null || _props$body13 === void 0 ? void 0 : _props$body13.messageReceivedBackgroundColor) ?? "rgba(0, 0, 0, 0.05)",
        borderColor: message.origin == "Sent" ? ((_props$body14 = props.body) === null || _props$body14 === void 0 ? void 0 : _props$body14.messageSentBorderColor) ?? "transparent" : ((_props$body15 = props.body) === null || _props$body15 === void 0 ? void 0 : _props$body15.messageReceivedBorderColor) ?? "#CCCCCC",
        borderWidth: message.origin == 'Sent' ? ((_props$body16 = props.body) === null || _props$body16 === void 0 ? void 0 : _props$body16.messageSentBorderWidth) ?? 0 : ((_props$body17 = props.body) === null || _props$body17 === void 0 ? void 0 : _props$body17.messageReceivedBorderWidth) ?? 1,
        borderStyle: message.origin == 'Sent' ? ((_props$body18 = props.body) === null || _props$body18 === void 0 ? void 0 : _props$body18.messageSentBorderStyle) ?? "solid" : ((_props$body19 = props.body) === null || _props$body19 === void 0 ? void 0 : _props$body19.messageReceivedBorderStyle) ?? "solid",
        borderTopRightRadius: message.origin == 'Received' ? ((_props$body20 = props.body) === null || _props$body20 === void 0 ? void 0 : _props$body20.messageReceivedBorderTopRightRadius) ?? 8 : ((_props$body21 = props.body) === null || _props$body21 === void 0 ? void 0 : _props$body21.messageSentBorderTopRightRadius) ?? 0,
        borderTopLeftRadius: message.origin == 'Received' ? ((_props$body22 = props.body) === null || _props$body22 === void 0 ? void 0 : _props$body22.messageReceivedBorderTopLeftRadius) ?? 0 : ((_props$body23 = props.body) === null || _props$body23 === void 0 ? void 0 : _props$body23.messageSentBorderTopLeftRadius) ?? 8,
        borderBottomRightRadius: message.origin == 'Received' ? ((_props$body24 = props.body) === null || _props$body24 === void 0 ? void 0 : _props$body24.messageReceivedBorderBottomRightRadius) ?? 8 : ((_props$body25 = props.body) === null || _props$body25 === void 0 ? void 0 : _props$body25.messageSentBorderBottomRightRadius) ?? 8,
        borderBottomLeftRadius: message.origin == 'Received' ? ((_props$body26 = props.body) === null || _props$body26 === void 0 ? void 0 : _props$body26.messageReceivedBorderBottomLeftRadius) ?? 8 : ((_props$body27 = props.body) === null || _props$body27 === void 0 ? void 0 : _props$body27.messageSentBorderBottomLeftRadius) ?? 8,
        paddingRight: 16,
        paddingLeft: 16
      }
    }, /*#__PURE__*/_react.default.createElement(_reactNativeMarkdownDisplay.default, {
      onLinkPress: onLinkPressed,
      style: {
        text: {
          color: message.origin == 'Sent' ? ((_props$body28 = props.body) === null || _props$body28 === void 0 ? void 0 : _props$body28.messageSentTextColor) ?? "#FFFFFF" : ((_props$body29 = props.body) === null || _props$body29 === void 0 ? void 0 : _props$body29.messageReceivedTextColor) ?? "#000000",
          fontSize: message.origin == 'Sent' ? ((_props$body30 = props.body) === null || _props$body30 === void 0 ? void 0 : _props$body30.messageSentFontSize) ?? 16 : ((_props$body31 = props.body) === null || _props$body31 === void 0 ? void 0 : _props$body31.messageReceivedFontSize) ?? 16,
          fontFamily: message.origin == 'Sent' ? (_props$body32 = props.body) === null || _props$body32 === void 0 ? void 0 : _props$body32.messageSentFontFamily : (_props$body33 = props.body) === null || _props$body33 === void 0 ? void 0 : _props$body33.messageReceivedFontFamily
        }
      }
    }, message.text)));
  }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, {
    horizontal: true,
    showsHorizontalScrollIndicator: false
  }, assistantHintsRef.current && assistantHintsRef.current.map((hint, idx) => {
    var _props$body34, _props$body35, _props$body36, _props$body37, _props$body38, _props$body39, _props$body40, _props$body41, _props$body42, _props$body43, _props$body44, _props$body45;
    return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
      onPress: () => {
        onHintClicked(hint);
      },
      style: {
        marginLeft: 8,
        marginTop: 16
      },
      key: idx
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: {
        backgroundColor: ((_props$body34 = props.body) === null || _props$body34 === void 0 ? void 0 : _props$body34.hintsBackgroundColor) ?? "#FFFFFF",
        paddingTop: ((_props$body35 = props.body) === null || _props$body35 === void 0 ? void 0 : _props$body35.hintsPaddingTop) ?? 12,
        paddingBottom: ((_props$body36 = props.body) === null || _props$body36 === void 0 ? void 0 : _props$body36.hintsPaddingBottom) ?? 12,
        paddingRight: ((_props$body37 = props.body) === null || _props$body37 === void 0 ? void 0 : _props$body37.hintsPaddingRight) ?? 12,
        paddingLeft: ((_props$body38 = props.body) === null || _props$body38 === void 0 ? void 0 : _props$body38.hintsPaddingLeft) ?? 12,
        borderWidth: ((_props$body39 = props.body) === null || _props$body39 === void 0 ? void 0 : _props$body39.hintsBorderWidth) ?? 1,
        borderColor: ((_props$body40 = props.body) === null || _props$body40 === void 0 ? void 0 : _props$body40.hintsBorderColor) ?? "#CCCCCC",
        borderStyle: ((_props$body41 = props.body) === null || _props$body41 === void 0 ? void 0 : _props$body41.hintsBorderStyle) ?? "solid",
        borderRadius: ((_props$body42 = props.body) === null || _props$body42 === void 0 ? void 0 : _props$body42.hintsBorderRadius) ?? 30
      }
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: {
        fontSize: ((_props$body43 = props.body) === null || _props$body43 === void 0 ? void 0 : _props$body43.hintsFontSize) ?? 16,
        color: ((_props$body44 = props.body) === null || _props$body44 === void 0 ? void 0 : _props$body44.hintsTextColor) ?? "#8F97A1",
        fontFamily: (_props$body45 = props.body) === null || _props$body45 === void 0 ? void 0 : _props$body45.hintsFontFamily
      }
    }, hint)));
  }))))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      paddingLeft: ((_props$toolBar2 = props.toolBar) === null || _props$toolBar2 === void 0 ? void 0 : _props$toolBar2.paddingLeft) ?? 20,
      paddingRight: ((_props$toolBar3 = props.toolBar) === null || _props$toolBar3 === void 0 ? void 0 : _props$toolBar3.paddingRight) ?? 20,
      paddingTop: ((_props$toolBar4 = props.toolBar) === null || _props$toolBar4 === void 0 ? void 0 : _props$toolBar4.paddingTop) ?? 12,
      paddingBottom: ((_props$toolBar5 = props.toolBar) === null || _props$toolBar5 === void 0 ? void 0 : _props$toolBar5.paddingBottom) ?? 30,
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, null, !assistantStateRef.current.includes('Conversation') && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      fontSize: ((_props$toolBar6 = props.toolBar) === null || _props$toolBar6 === void 0 ? void 0 : _props$toolBar6.drawerWelcomeFontSize) ?? 18,
      fontFamily: (_props$toolBar7 = props.toolBar) === null || _props$toolBar7 === void 0 ? void 0 : _props$toolBar7.drawerWelcomeTextFontFamily,
      color: ((_props$toolBar8 = props.toolBar) === null || _props$toolBar8 === void 0 ? void 0 : _props$toolBar8.drawerWelcomeTextColor) ?? "#8F97A1",
      fontStyle: ((_props$toolBar9 = props.toolBar) === null || _props$toolBar9 === void 0 ? void 0 : _props$toolBar9.drawerWelcomeTextFontStyle) ?? "italic",
      marginBottom: !isUsingSpeechRef.current ? 16 : 0
    }
  }, (_props$toolBar10 = props.toolBar) === null || _props$toolBar10 === void 0 ? void 0 : _props$toolBar10.drawerWelcomeText), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: {
      borderRadius: 30,
      width: 30,
      height: 30
    },
    onPress: onClosePress
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: {
      height: 25,
      width: 25
    },
    source: {
      uri: ((_props$header12 = props.header) === null || _props$header12 === void 0 ? void 0 : _props$header12.closeAssistantButtonImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/a6de04bb-e572-4a55-8cd9-1a7628285829/delete-2.png"
    }
  }))), isUsingSpeechRef.current && /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_SpeakingAnimation.SpeakingAnimation, {
    color: ((_props$toolBar11 = props.toolBar) === null || _props$toolBar11 === void 0 ? void 0 : _props$toolBar11.equalizerColor) ?? '#8F97A1',
    isSpeaking: assistantStateRef.current.includes('Speaking'),
    style: {
      marginTop: 35,
      justifyContent: 'center',
      display: 'flex',
      flexDirection: 'row'
    }
  }), assistantIsListeningRef.current ? /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      alignSelf: 'flex-start',
      fontSize: ((_props$toolBar12 = props.toolBar) === null || _props$toolBar12 === void 0 ? void 0 : _props$toolBar12.assistantStateFontSize) ?? 16,
      fontFamily: (_props$toolBar13 = props.toolBar) === null || _props$toolBar13 === void 0 ? void 0 : _props$toolBar13.assistantStateFontFamily,
      marginTop: 24,
      fontStyle: ((_props$toolBar14 = props.toolBar) === null || _props$toolBar14 === void 0 ? void 0 : _props$toolBar14.assistantStateFontStyle) ?? "italic",
      color: ((_props$toolBar15 = props.toolBar) === null || _props$toolBar15 === void 0 ? void 0 : _props$toolBar15.assistantStateTextColor) ?? "#8F97A1"
    }
  }, "Listening...") : assistantStateRef.current == 'Understood' ? /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      alignSelf: 'flex-start',
      fontSize: ((_props$toolBar16 = props.toolBar) === null || _props$toolBar16 === void 0 ? void 0 : _props$toolBar16.assistantStateFontSize) ?? 16,
      fontFamily: (_props$toolBar17 = props.toolBar) === null || _props$toolBar17 === void 0 ? void 0 : _props$toolBar17.assistantStateFontFamily,
      marginTop: 24,
      fontStyle: 'italic',
      color: ((_props$toolBar18 = props.toolBar) === null || _props$toolBar18 === void 0 ? void 0 : _props$toolBar18.assistantStateTextColor) ?? "#8F97A1"
    }
  }, "Processing...") : assistantStateRef.current.includes('Try Again') ? /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      alignSelf: 'flex-start',
      fontSize: ((_props$toolBar19 = props.toolBar) === null || _props$toolBar19 === void 0 ? void 0 : _props$toolBar19.assistantStateFontSize) ?? 16,
      fontFamily: (_props$toolBar20 = props.toolBar) === null || _props$toolBar20 === void 0 ? void 0 : _props$toolBar20.assistantStateFontFamily,
      marginTop: 24,
      fontStyle: 'italic',
      color: ((_props$toolBar21 = props.toolBar) === null || _props$toolBar21 === void 0 ? void 0 : _props$toolBar21.assistantStateTextColor) ?? "#8F97A1"
    }
  }, "I didn't catch that...") : /*#__PURE__*/_react.default.createElement(_reactNative.Text, null), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      borderWidth: 1,
      borderStyle: 'solid',
      borderColor: "#FFFFFF",
      padding: 8,
      marginTop: assistantIsListeningRef.current || assistantStateRef.current == 'Understood' || assistantStateRef.current.includes('Try Again') ? 4 : 30,
      borderRadius: 10,
      backgroundColor: ((_props$toolBar22 = props.toolBar) === null || _props$toolBar22 === void 0 ? void 0 : _props$toolBar22.speechResultBoxBackgroundColor) ?? "rgba(0, 0, 0, 0.5)"
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      fontSize: ((_props$toolBar23 = props.toolBar) === null || _props$toolBar23 === void 0 ? void 0 : _props$toolBar23.speechResultTextFontSize) ?? 16,
      fontFamily: (_props$toolBar24 = props.toolBar) === null || _props$toolBar24 === void 0 ? void 0 : _props$toolBar24.speechResultTextFontFamily,
      color: assistantState.includes('Speaking') ? ((_props$toolBar25 = props.toolBar) === null || _props$toolBar25 === void 0 ? void 0 : _props$toolBar25.partialSpeechResultTextColor) ?? "rgba(255 , 255, 255, .2)" : ((_props$toolBar26 = props.toolBar) === null || _props$toolBar26 === void 0 ? void 0 : _props$toolBar26.fullSpeechResultTextColor) ?? "#FFFFFF"
    }
  }, spokenText))), assistantStateRef.current.includes('Conversation') && !isUsingSpeechRef.current ? /*#__PURE__*/_react.default.createElement(_reactNative.View, null) : /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      marginTop: 16,
      borderWidth: 0.6,
      borderStyle: 'dashed',
      borderRadius: 1,
      borderColor: '#CBCCD2'
    }
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'row',
      marginTop: assistantStateRef.current.includes('Conversation') && !isUsingSpeechRef.current ? 0 : 16
    }
  }, props.useVoiceInput && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center'
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      fontSize: ((_props$toolBar27 = props.toolBar) === null || _props$toolBar27 === void 0 ? void 0 : _props$toolBar27.speakFontSize) ?? 12,
      fontFamily: (_props$toolBar28 = props.toolBar) === null || _props$toolBar28 === void 0 ? void 0 : _props$toolBar28.speakFontFamily,
      color: isUsingSpeech ? ((_props$toolBar29 = props.toolBar) === null || _props$toolBar29 === void 0 ? void 0 : _props$toolBar29.speakActiveTitleColor) ?? "#3E77A5" : ((_props$toolBar30 = props.toolBar) === null || _props$toolBar30 === void 0 ? void 0 : _props$toolBar30.speakInactiveTitleColor) ?? "#8F97A1"
    }
  }, "SPEAK"), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      borderRadius: 25,
      padding: 4,
      backgroundColor: assistantIsListeningRef.current ? ((_props$toolBar31 = props.toolBar) === null || _props$toolBar31 === void 0 ? void 0 : _props$toolBar31.micActiveHighlightColor) ?? "rgba(30, 126, 185, 0.12)" : ((_props$toolBar32 = props.toolBar) === null || _props$toolBar32 === void 0 ? void 0 : _props$toolBar32.micInactiveHighlightColor) ?? "transparent",
      marginTop: 12
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: onSpeechInputClicked
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: {
      height: 40,
      width: 40
    },
    source: {
      uri: isUsingSpeech ? ((_props$toolBar33 = props.toolBar) === null || _props$toolBar33 === void 0 ? void 0 : _props$toolBar33.micActiveImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/daca643f-6730-4af5-8817-8d9d0d9db0b5/mic-image.png" : ((_props$toolBar34 = props.toolBar) === null || _props$toolBar34 === void 0 ? void 0 : _props$toolBar34.micInactiveImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/3f10b6d7-eb71-4427-adbc-aadacbe8940e/mic-image-1-.png"
    }
  })))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      display: 'flex',
      flexDirection: 'column',
      flex: 1,
      marginLeft: props.useVoiceInput ? 16 : 0,
      height: props.useVoiceInput ? "auto" : 65
    }
  }, props.useVoiceInput && /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      fontSize: ((_props$toolBar35 = props.toolBar) === null || _props$toolBar35 === void 0 ? void 0 : _props$toolBar35.typeFontSize) ?? 12,
      fontFamily: (_props$toolBar36 = props.toolBar) === null || _props$toolBar36 === void 0 ? void 0 : _props$toolBar36.typeFontFamily,
      color: !isUsingSpeech ? ((_props$toolBar37 = props.toolBar) === null || _props$toolBar37 === void 0 ? void 0 : _props$toolBar37.typeActiveTitleColor) ?? "#3E77A5" : ((_props$toolBar38 = props.toolBar) === null || _props$toolBar38 === void 0 ? void 0 : _props$toolBar38.typeInactiveTitleColor) ?? "#8F97A1"
    }
  }, "TYPE"), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 1,
      display: 'flex',
      flexDirection: 'row',
      backgroundColor: !isUsingSpeech ? ((_props$toolBar39 = props.toolBar) === null || _props$toolBar39 === void 0 ? void 0 : _props$toolBar39.textboxActiveHighlightColor) ?? "rgba(30, 126, 185, 0.12)" : ((_props$toolBar40 = props.toolBar) === null || _props$toolBar40 === void 0 ? void 0 : _props$toolBar40.textboxInactiveHighlightColor) ?? "transparent",
      borderRadius: 10,
      paddingRight: 10,
      paddingLeft: 10,
      marginTop: 4
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, {
    value: inputText,
    onChangeText: setInputText,
    onTouchStart: onTextInputClicked,
    style: {
      height: 45,
      color: ((_props$toolBar41 = props.toolBar) === null || _props$toolBar41 === void 0 ? void 0 : _props$toolBar41.textInputTextColor) ?? "#8F97A1",
      borderBottomColor: ((_props$toolBar42 = props.toolBar) === null || _props$toolBar42 === void 0 ? void 0 : _props$toolBar42.textInputLineColor) ?? "#8F97A1",
      borderBottomWidth: 1,
      flex: 1
    },
    selectionColor: ((_props$toolBar43 = props.toolBar) === null || _props$toolBar43 === void 0 ? void 0 : _props$toolBar43.textInputCursorColor) ?? "#707174",
    underlineColorAndroid: "transparent"
  }), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: {
      marginBottom: 8,
      marginLeft: 4
    },
    onPress: onSendPressed
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: {
      height: 25,
      width: 25,
      marginTop: 20
    },
    source: {
      uri: !isUsingSpeech ? ((_props$toolBar44 = props.toolBar) === null || _props$toolBar44 === void 0 ? void 0 : _props$toolBar44.sendActiveImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/7a39bc6f-eef5-4185-bcf8-2a645aff53b2/Send-3-.png" : ((_props$toolBar45 = props.toolBar) === null || _props$toolBar45 === void 0 ? void 0 : _props$toolBar45.sendInactiveImage) ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/0c5aa61c-7d6c-4272-abd2-75d9f5771214/Send-2-.png"
    }
  }))))))));
};
exports.AssistantDrawerUI = AssistantDrawerUI;
//# sourceMappingURL=AssistantDrawerUI.js.map