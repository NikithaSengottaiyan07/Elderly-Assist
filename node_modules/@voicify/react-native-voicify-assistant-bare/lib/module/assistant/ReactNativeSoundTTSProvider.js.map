{"version":3,"names":["Sound","ReactNativeSoundTTSProvider","constructor","settings","_defineProperty","initialize","locale","createLinkedList","src","top","i","length","url","next","temp","playNext","linkedSrc","audioPlayer","error","cancel","play","success","_linkedSrc$next","_this$speechEndHandle","speechEndHandlers","forEach","handle","speakSsml","ssml","linkedLists","ssmlUri","ssmlToSpeech","stop","textToSpeechRequest","generateTTSRequest","result","fetch","serverRootUrl","provider","method","headers","body","JSON","stringify","status","response","json","e","request","applicationId","appId","applicationSecret","appKey","ssmlRequest","voice","addFinishListener","callback","_this$speechEndHandle2","push","clearHandlers"],"sources":["ReactNativeSoundTTSProvider.ts"],"sourcesContent":["import type { TTSData, TTSRequest } from \"../models/customAssistantApiModels\";\r\nimport type VoicifyTextToSpeechProvider from './VoicifyTextToSpeechProvider';\r\nimport Sound from 'react-native-sound'\r\ntype LinkedUrls = {\r\n    src?: string\r\n    next?: LinkedUrls\r\n}\r\nexport class ReactNativeSoundTTSProvider implements VoicifyTextToSpeechProvider {\r\n    settings: VoicifyTextToSpeechSettings\r\n    audioPlayer?: Sound\r\n    speechEndHandlers: (() => void)[] = []\r\n    cancel?: boolean\r\n\r\n    constructor(settings: VoicifyTextToSpeechSettings) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    initialize(locale: string) {\r\n        this.settings.locale = locale\r\n    }\r\n    createLinkedList(src: TTSData[]) {\r\n        let top: LinkedUrls = {};\r\n        for (let i = src.length - 1; i >= 0; i--) {\r\n            if (i == src.length - 1) {\r\n                top = {\r\n                    src: src[i].url,\r\n                    next: {}\r\n                }\r\n            }\r\n            else {\r\n                let temp = {\r\n                    src: src[i].url,\r\n                    next: top\r\n                };\r\n                top = temp;\r\n            }\r\n        }\r\n        return top;\r\n    }\r\n    playNext(linkedSrc: LinkedUrls)\r\n    {\r\n        this.audioPlayer = new Sound(linkedSrc.src, \"\", (error) => {\r\n            if (error) {\r\n                return;\r\n            }\r\n            if (this.audioPlayer) {\r\n                if(!this.cancel)\r\n                {\r\n                    this.audioPlayer.play((success: any) => {\r\n                        if (success) {\r\n                            if(linkedSrc.next?.src)\r\n                            {\r\n                                this.playNext(linkedSrc.next)\r\n    \r\n                            }\r\n                            else\r\n                            {\r\n                                this.speechEndHandlers?.forEach(handle => handle());\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        \r\n    }\r\n    async speakSsml(ssml: string) {\r\n        let linkedLists: LinkedUrls = {}\r\n        const ssmlUri = await this.ssmlToSpeech(ssml)\r\n        if (ssmlUri) {\r\n            linkedLists = this.createLinkedList(ssmlUri)\r\n        }\r\n        if (linkedLists) {\r\n            this.playNext(linkedLists)\r\n        }\r\n    }\r\n\r\n    async stop() {\r\n        if (this.audioPlayer) {\r\n            this.audioPlayer.stop()\r\n        }\r\n    }\r\n\r\n    async ssmlToSpeech(ssml: string) {\r\n        try {\r\n            const textToSpeechRequest = this.generateTTSRequest(ssml);\r\n            const result = await fetch(`${this.settings.serverRootUrl}/api/Ssml/toSpeech/${this.settings.provider}`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(textToSpeechRequest)\r\n            });\r\n            if (result.status == 200) {\r\n                const response = await result.json() as TTSData[];\r\n                return (response)\r\n            }\r\n            else {\r\n                return null\r\n            }\r\n        }\r\n        catch (e: any) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    generateTTSRequest(ssml: string): TTSRequest {\r\n        const request: TTSRequest = {\r\n            applicationId: this.settings.appId,\r\n            applicationSecret: this.settings.appKey,\r\n            ssmlRequest: {\r\n                ssml: ssml,\r\n                locale: this.settings.locale,\r\n                voice: this.settings.voice\r\n            }\r\n        }\r\n        return (request)\r\n    }\r\n\r\n    addFinishListener(callback: () => void) {\r\n        this.speechEndHandlers?.push(callback);\r\n    }\r\n\r\n    clearHandlers() {\r\n        this.speechEndHandlers = []\r\n    }\r\n}\r\n\r\nexport interface VoicifyTextToSpeechSettings {\r\n    appId: string\r\n    appKey: string\r\n    locale: string\r\n    voice: string\r\n    serverRootUrl: string\r\n    provider: 'Google' | 'Polly'\r\n}\r\n\r\n"],"mappings":"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"}