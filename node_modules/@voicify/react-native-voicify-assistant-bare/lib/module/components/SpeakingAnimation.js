import React from 'react';
import { useEffect, useRef } from "react";
import { Animated, View } from 'react-native';
let pulses = [];
let randomValues = [];
export const SpeakingAnimation = props => {
  const propsRef = useRef();
  propsRef.current = props.isSpeaking;
  useEffect(() => {
    if (pulses[0] == null) {
      for (let i = 0; i <= 21; i++) {
        pulses.push(new Animated.Value(1));
      }
    }
  }, []);
  useEffect(() => {
    function createAnimation() {
      for (let i = 0; i <= 21; i++) {
        if (i < 3 || i > 18) {
          randomValues[i] = Math.random() < 0.5 ? (1 - Math.random()) * (5 - 1) + 1 : Math.random() * (5 - 1) + 1;
        } else if (i >= 3 && i < 7 || i > 15 && i <= 18) {
          randomValues[i] = Math.random() < 0.5 ? (1 - Math.random()) * (7 - 1) + 1 : Math.random() * (7 - 1) + 1;
        } else if (i >= 7 && i < 10 || i > 12 && i <= 15) {
          randomValues[i] = Math.random() < 0.5 ? (1 - Math.random()) * (12 - 3) + 3 : Math.random() * (12 - 3) + 3;
        } else if (i == 10 || i == 12) {
          randomValues[i] = Math.random() < 0.5 ? (1 - Math.random()) * (15 - 5) + 5 : Math.random() * (15 - 5) + 5;
        } else {
          randomValues[i] = Math.random() < 0.5 ? (1 - Math.random()) * (17 - 8) + 8 : Math.random() * (17 - 8) + 8;
        }
      }
      Animated.parallel([Animated.timing(pulses[0], {
        toValue: randomValues[0],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[1], {
        toValue: randomValues[1],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[2], {
        toValue: randomValues[2],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[3], {
        toValue: randomValues[3],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[4], {
        toValue: randomValues[4],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[5], {
        toValue: randomValues[5],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[6], {
        toValue: randomValues[6],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[7], {
        toValue: randomValues[7],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[8], {
        toValue: randomValues[8],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[9], {
        toValue: randomValues[9],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[10], {
        toValue: randomValues[10],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[11], {
        toValue: randomValues[11],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[12], {
        toValue: randomValues[12],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[13], {
        toValue: randomValues[13],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[14], {
        toValue: randomValues[14],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[15], {
        toValue: randomValues[15],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[16], {
        toValue: randomValues[16],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[17], {
        toValue: randomValues[17],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[18], {
        toValue: randomValues[18],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[19], {
        toValue: randomValues[19],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[20], {
        toValue: randomValues[20],
        duration: 60,
        useNativeDriver: true
      }), Animated.timing(pulses[21], {
        toValue: randomValues[21],
        duration: 60,
        useNativeDriver: true
      })]).start(() => {
        if (propsRef.current) {
          createAnimation();
        } else {
          return;
        }
      });
    }
    if (propsRef.current) {
      createAnimation();
    }
  }, [propsRef.current]);
  return /*#__PURE__*/React.createElement(View, {
    style: props.style
  }, pulses.map((pulse, idx) => {
    return /*#__PURE__*/React.createElement(Animated.View, {
      key: idx,
      style: {
        width: 4,
        transform: [{
          scaleY: propsRef.current ? pulse : 1
        }],
        height: 4,
        backgroundColor: props.color,
        marginRight: 1
      }
    });
  }));
};
//# sourceMappingURL=SpeakingAnimation.js.map