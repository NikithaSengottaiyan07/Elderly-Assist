import type { TextStyle, ViewStyle } from "react-native";
export type AssistantState = 'Start' | 'Speaking' | 'Conversation' | 'Try Again' | 'Try Again Pressed' | 'Understood' | 'Playing' | 'Conversation Ended' | 'Conversation Try Again' | 'Conversation Speaking';
export type Origin = 'Sent' | 'Received';
export type InputType = 'Speech' | 'Text';
export type Message = {
    text: string;
    origin: Origin;
};
export interface Header {
    assistantImage?: string;
    assistantName?: string;
    closeAssistantButtonImage?: string;
    backgroundColor?: ViewStyle["backgroundColor"];
    assistantImageBackgroundColor?: ViewStyle["backgroundColor"];
    assistantNameTextColor?: TextStyle["color"];
    assistantNameFontSize?: TextStyle["fontSize"];
    assistantNameFontFamily?: TextStyle["fontFamily"];
    assistantImageBorderRadius?: ViewStyle["borderRadius"];
    assistantImageBorderColor?: ViewStyle["borderColor"];
    assistantImageBorderWidth?: ViewStyle["borderWidth"];
    assistantImageBorderStyle?: ViewStyle["borderStyle"];
    paddingLeft?: ViewStyle["paddingLeft"];
    paddingRight?: ViewStyle["paddingRight"];
    paddingTop?: ViewStyle["paddingTop"];
    paddingBottom?: ViewStyle["paddingBottom"];
}
export interface Body {
    assistantImage?: string;
    backgroundColor?: ViewStyle["backgroundColor"];
    aassistantImageBorderColor?: ViewStyle["borderColor"];
    assistantImageBorderWidth?: ViewStyle["borderWidth"];
    assistantImageBorderStyle?: ViewStyle["borderStyle"];
    assistantImageBorderRadius?: ViewStyle["borderRadius"];
    assistantImageBackgroundColor?: ViewStyle["backgroundColor"];
    messageSentTextColor?: TextStyle["color"];
    messageSentBackgroundColor?: ViewStyle["backgroundColor"];
    messageSentBorderWidth?: ViewStyle["borderWidth"];
    messageSentBorderStyle?: ViewStyle["borderStyle"];
    messageReceivedBorderWidth?: ViewStyle["borderWidth"];
    messageReceivedBorderStyle?: ViewStyle["borderStyle"];
    messageReceivedTextColor?: TextStyle["color"];
    messageReceivedBackgroundColor?: ViewStyle["backgroundColor"];
    messageSentBorderColor?: ViewStyle["borderColor"];
    messageReceivedBorderColor?: ViewStyle["borderColor"];
    messageSentBorderTopRightRadius?: ViewStyle["borderTopRightRadius"];
    messageSentBorderTopLeftRadius?: ViewStyle["borderTopLeftRadius"];
    messageSentBorderBottomRightRadius?: ViewStyle["borderBottomRightRadius"];
    messageSentBorderBottomLeftRadius?: ViewStyle["borderBottomLeftRadius"];
    messageReceivedBorderTopRightRadius?: ViewStyle["borderTopRightRadius"];
    messageReceivedBorderTopLeftRadius?: ViewStyle["borderTopLeftRadius"];
    messageReceivedBorderBottomRightRadius?: ViewStyle["borderBottomRightRadius"];
    messageReceivedBorderBottomLeftRadius?: ViewStyle["borderBottomLeftRadius"];
    messageSentFontSize?: TextStyle["fontSize"];
    messageSentFontFamily?: TextStyle["fontFamily"];
    messageReceivedFontFamily?: TextStyle["fontFamily"];
    messageReceivedFontSize?: TextStyle["fontSize"];
    paddingLeft?: ViewStyle["paddingLeft"];
    paddingRight?: ViewStyle["paddingRight"];
    paddingTop?: ViewStyle["paddingTop"];
    paddingBottom?: ViewStyle["paddingBottom"];
    borderTopColor?: ViewStyle["borderTopColor"];
    borderBottomColor?: ViewStyle["borderBottomColor"];
    borderTopWidth?: ViewStyle["borderTopWidth"];
    borderBottomWidth?: ViewStyle["borderBottomWidth"];
    borderStyle?: ViewStyle["borderStyle"];
    hintsPaddingTop?: ViewStyle["paddingTop"];
    hintsPaddingBottom?: ViewStyle["paddingBottom"];
    hintsPaddingRight?: ViewStyle["paddingRight"];
    hintsPaddingLeft?: ViewStyle["paddingLeft"];
    hintsBackgroundColor?: ViewStyle["backgroundColor"];
    hintsBorderWidth?: ViewStyle["borderWidth"];
    hintsBorderColor?: ViewStyle["borderColor"];
    hintsBorderStyle?: ViewStyle["borderStyle"];
    hintsBorderRadius?: ViewStyle["borderRadius"];
    hintsFontSize?: TextStyle["fontSize"];
    hintsTextColor?: TextStyle["color"];
    hintsFontFamily?: TextStyle["fontFamily"];
}
export interface ToolBar {
    drawerWelcomeText?: string;
    micActiveImage?: string;
    sendActiveImage?: string;
    sendInactiveImage?: string;
    micInactiveImage?: string;
    textInputLineColor?: string;
    textInputCursorColor?: string;
    textInputTextColor?: string;
    drawerWelcomeTextFontStyle?: TextStyle["fontStyle"];
    drawerWelcomeTextColor?: TextStyle["color"];
    drawerWelcomeFontSize?: TextStyle["fontSize"];
    drawerWelcomeTextFontFamily?: TextStyle["fontFamily"];
    equalizerColor?: string;
    backgroundColor?: ViewStyle["backgroundColor"];
    micActiveHighlightColor?: ViewStyle["backgroundColor"];
    micInactiveHighlightColor?: ViewStyle["backgroundColor"];
    speakActiveTitleColor?: TextStyle["color"];
    speakInactiveTitleColor?: TextStyle["color"];
    typeActiveTitleColor?: TextStyle["color"];
    typeInactiveTitleColor?: TextStyle["color"];
    textboxActiveHighlightColor?: ViewStyle["backgroundColor"];
    textboxInactiveHighlightColor?: ViewStyle["backgroundColor"];
    partialSpeechResultTextColor?: TextStyle["color"];
    fullSpeechResultTextColor?: TextStyle["color"];
    speechResultBoxBackgroundColor?: ViewStyle["backgroundColor"];
    speechResultTextFontSize?: TextStyle["fontSize"];
    speechResultTextFontFamily?: TextStyle["fontFamily"];
    assistantStateTextColor?: TextStyle["color"];
    assistantStateFontSize?: TextStyle["fontSize"];
    assistantStateFontStyle?: TextStyle["fontStyle"];
    assistantStateFontFamily?: TextStyle["fontFamily"];
    paddingLeft?: ViewStyle["paddingLeft"];
    paddingRight?: ViewStyle["paddingRight"];
    paddingTop?: ViewStyle["paddingTop"];
    paddingBottom?: ViewStyle["paddingBottom"];
    speakFontSize?: TextStyle["fontSize"];
    speakFontFamily?: TextStyle["fontFamily"];
    typeFontSize?: TextStyle["fontSize"];
    typeFontFamily?: TextStyle["fontFamily"];
}
