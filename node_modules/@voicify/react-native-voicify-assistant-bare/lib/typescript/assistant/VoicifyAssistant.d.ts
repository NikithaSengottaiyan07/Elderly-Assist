import type { CustomAssistantRequest, CustomAssistantResponse, CustomAssistantUser, MediaItemModel, VoicifySessionData, VoicifyUserData } from "../models/customAssistantApiModels";
import type { InputType } from "./AssistantUITypes";
import type VoicifySpeechToTextProvider from "./VoicifySpeechToTextProvider";
import type VoicifyTextToSpeechProvider from "./VoicifyTextToSpeechProvider";
export declare class VoicifyAssistant {
    textToSpeechProvider?: VoicifyTextToSpeechProvider;
    speechToTextProvider?: VoicifySpeechToTextProvider;
    settings: VoicifyAssistantSettings;
    sessionId?: string;
    userId?: string;
    accessToken?: string;
    sessionAttributes?: {
        [key: string]: any;
    };
    userAttributes?: {
        [key: string]: any;
    };
    errorHandlers: ((e: string) => void)[];
    effectHandlers: {
        effect: string;
        callback: ((data: any) => void);
    }[];
    requestStartedHandlers: ((req: CustomAssistantRequest) => void)[];
    responseHandlers: ((res: CustomAssistantResponse) => void)[];
    endSessionHandlers: ((res: CustomAssistantResponse) => void)[];
    audioHandlers: ((media: MediaItemModel) => void)[];
    videoHandlers: ((media: MediaItemModel) => void)[];
    currentSessionInfo?: VoicifySessionData;
    currentUserInfo?: VoicifyUserData;
    constructor(settings: VoicifyAssistantSettings, ttsProvider?: VoicifyTextToSpeechProvider, sttProvider?: VoicifySpeechToTextProvider);
    initializeAndStart(): void;
    startNewSession(sessionId?: string, userId?: string, sessionAttributes?: {
        [key: string]: any;
    }, userAttributes?: {
        [key: string]: any;
    }): void;
    onEffect(effectName: string, callback: (data: any) => void): void;
    onError(callback: (error: string) => void): void;
    onRequestStarted(callback: (request: CustomAssistantRequest) => void): void;
    onResponseReceived(callback: (response: CustomAssistantResponse) => void): void;
    onSessionEnded(callback: (response: CustomAssistantResponse) => void): void;
    onPlayVideo(callback: (mediaItem: MediaItemModel) => void): void;
    onPlayAudio(callback: (mediaItem: MediaItemModel) => void): void;
    clearHandlers(): void;
    makeTextRequest(text: string, requestAttributes?: {
        [key: string]: any;
    }, inputType?: InputType): Promise<CustomAssistantResponse | null>;
    makeWelcomeRequest(requestAttributes?: {
        [key: string]: any;
    }): Promise<CustomAssistantResponse | null>;
    addSessionAttribute(key: string, value: any): void;
    addUserAttribute(key: string, value: any): void;
    addAccessToken(value: string): void;
    makeRequest(request: CustomAssistantRequest, inputType?: InputType): Promise<CustomAssistantResponse | null>;
    generateTextRequest(text: string, requestAttributes?: {
        [key: string]: any;
    }): CustomAssistantRequest;
    generateWelcomeRequest(requestAttributes?: {
        [key: string]: any;
    }): CustomAssistantRequest;
    generateUser(): CustomAssistantUser;
    generateDevice(): {
        id: string;
        name: string;
        supportsDisplayText: boolean;
        supportsTextInput: boolean;
        supportsSsml: boolean;
        supportsVoiceInput: boolean;
    };
}
export interface VoicifyAssistantSettings {
    serverRootUrl: string;
    appId: string;
    appKey: string;
    locale: string;
    channel: string;
    device: string;
    autoRunConversation: boolean;
    initializeWithWelcomeMessage: boolean;
    useVoiceInput: boolean;
    useOutputSpeech: boolean;
}
