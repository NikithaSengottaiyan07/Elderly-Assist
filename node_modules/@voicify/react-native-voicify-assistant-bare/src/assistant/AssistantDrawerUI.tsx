import { VoicifyAssistant } from './VoicifyAssistant';
import React, { useEffect, useRef, useState } from 'react';
import { Text, TouchableOpacity, View, Image, TextInput, ScrollView, Keyboard, Platform, Dimensions } from 'react-native';
import { ReactNativeSoundTTSProvider } from './ReactNativeSoundTTSProvider';
import { ReactNativeVoiceSTTProvider } from './ReactNativeVoiceSTTProvider';
import { SpeakingAnimation } from '../components/SpeakingAnimation';
import type { VoicifyAssistantSettings } from './VoicifyAssistant';
import Modal from "react-native-modal";
import  Markdown  from 'react-native-markdown-display'
import { InAppBrowser } from 'react-native-inappbrowser-reborn'
import type { AssistantState, Header, Message, ToolBar, Body, InputType } from './AssistantUITypes';

interface AssistantDrawerUiProps extends VoicifyAssistantSettings {
    header?: Header
    body?: Body
    toolBar?: ToolBar
    isModalOpen: boolean,
    onModalClosed(): void,
    initializeWithText?: boolean
    clearConversationOnClose?: boolean
    effects: string[]
    onEffect(effect: string, data: any): void
    textToSpeechProvider: 'Google' | 'Polly'
    voice: string
}

let expoTextToSpeech: ReactNativeSoundTTSProvider
let reactNativeVoice: ReactNativeVoiceSTTProvider
let myAssistant: VoicifyAssistant
let assistantMessages: Message[] = []
let inputMessage: string
const noInputError = "7/No match"

export const AssistantDrawerUI = (props: AssistantDrawerUiProps) => {
    const [assistantIsListening, setAssistantIsListening] = useState<boolean>()
    const [assistantState, setAssistantState] = useState<AssistantState>(props.initializeWithWelcomeMessage ? "Conversation" : "Start")
    const [assistantConversation, setAssistantConversation] = useState<Message[]>()
    const [assistantHints, setAssistantHints] = useState<string[]>()
    const [spokenText, setSpokenText] = useState<string>()
    const [shouldEndSession, setShouldEndSession] = useState(true)
    const [isUsingSpeech, setIsUsingSpeech] = useState(false)
    const [inputText, setInputText] = useState<string>('');
    const [isKeyboardActive, setIsKeyboardActive] = useState<boolean>(false)
    const [isRecoginzing, setIsRecognizing] = useState<boolean>(false)
    const [inputType, setInputType] = useState<InputType>(props.useVoiceInput && !props.initializeWithText ? 'Speech' : 'Text')
    const [isLandscape, setIsLandscape] = useState<boolean>(false)

    const isRecognizingRef = useRef<boolean>()
    const isKeyboardActiveRef = useRef<boolean>()
    const isUsingSpeechRef = useRef<boolean>()
    const assistantIsListeningRef = useRef<boolean>()
    const messagesRef = useRef<Message[]>();
    const assistantStateRef = useRef<string>()
    const shouldEndSessionRef = useRef<boolean>()
    const scrollViewRef = useRef<any>();
    const assistantHintsRef = useRef<string[]>()
    const inputTypeRef = useRef<InputType>()

    assistantHintsRef.current = assistantHints
    isRecognizingRef.current = isRecoginzing
    isKeyboardActiveRef.current = isKeyboardActive
    isUsingSpeechRef.current = isUsingSpeech
    assistantIsListeningRef.current = assistantIsListening
    messagesRef.current = assistantConversation
    assistantStateRef.current = assistantState
    shouldEndSessionRef.current = shouldEndSession
    inputTypeRef.current = inputType

    useEffect(() => {
        if (isKeyboardActiveRef.current || (assistantStateRef.current?.includes('Conversation') && isUsingSpeechRef.current)) {
            if (scrollViewRef.current) {
                scrollViewRef.current.scrollToEnd({ animated: true })
            }
        }
    }, [isKeyboardActiveRef.current, isUsingSpeechRef.current])

    if (Platform.OS == "ios") { //use effect to time out if the user doesnt say anything on ios
        useEffect(() => {
            if (assistantIsListeningRef.current) {
                setTimeout(() => {
                    if (assistantIsListeningRef.current && !isRecognizingRef.current) {
                        reactNativeVoice.stopListening()
                        setAssistantIsListening(false)
                        if (assistantStateRef.current?.includes('Conversation')) {

                            setAssistantState('Conversation Try Again')
                        }
                        else {
                            setAssistantState('Try Again')
                        }
                    }
                }, 5000)
                setIsRecognizing(false)
            }

        }, [assistantIsListeningRef.current])
    }

    const onModalShow = () => {
        Dimensions.addEventListener("change", () => {
            if (isOrientationLandscape()) {
                setIsLandscape(true)
            }
            else {
                setIsLandscape(false)
            }
        })
        Keyboard.addListener("keyboardDidHide", () => {
            setIsKeyboardActive(false)
        })

        Keyboard.addListener("keyboardDidShow", () => {
            setIsKeyboardActive(true)
        })
        expoTextToSpeech = new ReactNativeSoundTTSProvider({
            appId: props.appId,
            appKey: props.appKey,
            locale: props.locale,
            provider: props.textToSpeechProvider,
            serverRootUrl: props.serverRootUrl,
            voice: props.voice
        })
        reactNativeVoice = new ReactNativeVoiceSTTProvider(props.locale)
        myAssistant = new VoicifyAssistant({
            appId: props.appId,
            appKey: props.appKey,
            locale: props.locale,
            channel: props.channel,
            device: props.device,
            autoRunConversation: props.autoRunConversation,
            initializeWithWelcomeMessage: props.initializeWithWelcomeMessage,
            useOutputSpeech: props.useOutputSpeech,
            useVoiceInput: props.useVoiceInput,
            serverRootUrl: props.serverRootUrl
        }, expoTextToSpeech, reactNativeVoice)
        if (assistantConversation) {
            assistantMessages = [...assistantConversation]
        }
        setIsUsingSpeech(props.useVoiceInput && !props.initializeWithText ? true : false)
        setAssistantIsListening(false)
        setSpokenText('')
        props.initializeWithWelcomeMessage ? setAssistantState("Conversation") : setAssistantState('Start')
        setShouldEndSession(true)
        setSTTProperties();
        setAssistantProperties()
        if (!props.initializeWithText && !props.initializeWithWelcomeMessage && props.useVoiceInput) {
            reactNativeVoice.startListening()
        }
    }
    
    function isOrientationLandscape() {
        const dim = Dimensions.get("screen")
        return dim.width >= dim.height
    }

    const setAssistantProperties = () => {
        myAssistant.clearHandlers();

        myAssistant.initializeAndStart();

        myAssistant.onResponseReceived(async res => {
            setSpokenText('')
            if (res.hints) {
                setAssistantHints([...res.hints])
            }
            else {
                setAssistantHints([])
            }
            if (!res.endSession && shouldEndSessionRef.current) {       //if we are starting a multi turn conversation
                setShouldEndSession(false)
                setAssistantState('Conversation')
                if (inputMessage) {
                    assistantMessages.push({ text: inputMessage, origin: 'Sent' })
                    inputMessage = ''
                }
                if (res.outputSpeech && res.displayText) {
                    assistantMessages.push({ text: res.displayText, origin: 'Received' })
                    setAssistantConversation([...assistantMessages])
                }
            }
            else if (!res.endSession && res.displayText && !shouldEndSessionRef.current) { // if we are continuing a multi turn conversation
                if (inputMessage) {
                    assistantMessages.push({ text: inputMessage, origin: 'Sent' })
                    inputMessage = ''
                }
                if (res.outputSpeech) {
                    assistantMessages.push({ text: res.displayText, origin: 'Received' })
                    setAssistantConversation([...assistantMessages])
                }
            }
            else {                          // if we are ending a multi turn conversation
                setShouldEndSession(true)
                if (assistantStateRef.current?.includes('Conversation')) {
                    if (inputMessage) {
                        assistantMessages.push({ text: inputMessage, origin: 'Sent' })
                        inputMessage = ''
                    }
                    if (res.outputSpeech && res.displayText) {
                        assistantMessages.push({ text: res.displayText, origin: 'Received' })
                        setAssistantConversation([...assistantMessages])
                        setAssistantState('Conversation Ended')
                    }
                }
            }
        })
        myAssistant.startNewSession()
        props.effects.forEach(effect => {
            myAssistant.onEffect(effect, async (data) => {
                if (data) {
                    props.onEffect(effect, data)
                }
            });
        })
    }

    const setSTTProperties = async () => {
        //the STT provider is initialized in the assistant class
        reactNativeVoice.clearHandlers();
        reactNativeVoice.addFinishListener(async e => {
            if (e) {
                if (assistantConversation) {
                    assistantMessages = [...assistantConversation]
                }
                if (assistantStateRef.current?.includes("Conversation")) {
                    setAssistantState('Conversation')
                    setSpokenText(e);
                    inputMessage = e
                    await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
                }
                else {
                    setAssistantState('Understood')
                    setSpokenText(e);
                    inputMessage = e
                    await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
                }
            }
        })

        reactNativeVoice.addPartialListener(async e => {
            if (e) {
                setIsRecognizing(true)
                setSpokenText(e);
            }
        })

        reactNativeVoice.addStartListener(async () => {
            if (assistantStateRef.current) {
                if (assistantStateRef.current.includes('Conversation')) {
                    setAssistantState('Conversation')
                }
                else {
                    setAssistantState('Start')
                }
            }
            setAssistantIsListening(true)
        })

        reactNativeVoice.addEndListener(async () => {
            setAssistantIsListening(false)
        })

        reactNativeVoice.addErrorListener(async e => {
            if (e == noInputError) {
                if (assistantStateRef.current?.includes('Conversation')) {
                    setAssistantIsListening(false)
                    setAssistantState('Conversation Try Again')

                }
                else {
                    setAssistantIsListening(false)
                    setAssistantState('Try Again')
                }
            }
        })

        reactNativeVoice.addVolumeListener(async e => {
            if (assistantStateRef.current) {
                if (assistantStateRef.current.includes('Conversation')) {
                    if (e > 2) {
                        if(assistantIsListeningRef.current){
                            setAssistantState('Conversation Speaking')
                        }
                        
                    }
                }
                else {
                    if (!assistantStateRef.current.includes('Try Again')) {
                        if (e > 2) {
                            if(assistantIsListeningRef.current)
                            {
                                setAssistantState('Speaking')
                            }
                        }
                    }
                }
            }

        })
    }

    const onClosePress = () => {
        props.onModalClosed();
    }

    const onModalHide = () => {
        if (props.clearConversationOnClose) {
            props.clearConversationOnClose && setAssistantConversation([])
            assistantMessages = []
        }
        props.initializeWithWelcomeMessage ? setAssistantState("Conversation") : setAssistantState('Start')
        reactNativeVoice.destroyInstance();
        reactNativeVoice.stopListening();
        expoTextToSpeech?.stop();
    }

    const onTextInputClicked = () => {
        setInputType('Text')
        setIsUsingSpeech(false)
        if (assistantIsListeningRef.current) {

            reactNativeVoice.stopListening()
            reactNativeVoice.destroyInstance()
            setAssistantIsListening(false)
        }
    }

    const onSpeechInputClicked = () => {
        expoTextToSpeech?.stop();
        Keyboard.dismiss()
        setIsUsingSpeech(true)
        if (assistantIsListeningRef.current) {
            setAssistantIsListening(false)
            reactNativeVoice.stopListening()
            reactNativeVoice.destroyInstance()
            if (assistantStateRef.current?.includes('Conversation')) {
                setAssistantState('Conversation Try Again')
            }
            else {
                setAssistantState('Try Again')
            }
        }
        else {
            reactNativeVoice.startListening()
        }
    }

    const onSendPressed = async () => {
        expoTextToSpeech?.stop()
        Keyboard.dismiss()
        if (inputText) {
            if (assistantStateRef.current?.includes("Conversation")) {
                setAssistantState('Conversation')
                inputMessage = inputText
                setInputText('')
                await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
            }
            else {
                setAssistantState('Understood')
                inputMessage = inputText
                setInputText('')
                await myAssistant.makeTextRequest(inputMessage, {}, inputTypeRef.current);
            }
        }

    }

    const openBrowser = async (url: string) => {
        await InAppBrowser.open(url)
    }

    const onLinkPressed = (url: string): boolean => {
        if (url) {
            openBrowser(url)
        }
        return false
    }

    const onHintClicked = async (hint: string) => {
        expoTextToSpeech.stop()
        reactNativeVoice.stopListening()
        reactNativeVoice.destroyInstance()
        setAssistantIsListening(false)
        inputMessage = hint
        await myAssistant.makeTextRequest(hint, {}, inputTypeRef.current);
    }

    {/* //There is a bug with react native modal where if you dont supply this touchable opacity with activeOpacity 1 (IE: doesnt actually do anything), you cannot scroll without it */ }
    return (
        <Modal propagateSwipe={true} onModalShow={onModalShow} isVisible={props.isModalOpen} onModalHide={onModalHide} animationIn='slideInUp' avoidKeyboard={true} style={{ borderRadius: 100, margin: 0, justifyContent: !assistantStateRef.current.includes('Conversation') ? 'flex-end' : 'flex-start', display: 'flex', flexDirection: 'column' }} coverScreen={true}>
            <View style={{ backgroundColor: props.toolBar?.backgroundColor ?? "#FFFFFF", display: 'flex', flexDirection: 'column', flex: (assistantStateRef.current?.includes('Conversation')) ? 1 : (!isUsingSpeechRef.current && isKeyboardActiveRef.current) ? .4 : (!isUsingSpeechRef.current && !isKeyboardActiveRef.current && !isLandscape) ? .22 : (!isUsingSpeechRef.current && !isKeyboardActiveRef.current && isLandscape) ? .5 : 0, borderTopRightRadius: 20, borderTopLeftRadius: 20, }}>
                {assistantStateRef.current.includes('Conversation') &&
                    <View style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>
                        <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', backgroundColor: props.header?.backgroundColor ?? "#FFFFFF", paddingLeft: props.header?.paddingLeft ?? 12, paddingRight: props.header?.paddingRight ?? 20, paddingTop: props.header?.paddingTop ?? 20, paddingBottom: props.header?.paddingBottom ?? 0}}>
                            <View style={{ display: 'flex', flexDirection: 'row', height: 60, justifyContent: 'flex-start', alignContent: 'center', alignItems: 'center', }}>
                                {props.header?.assistantImage && <View style={{ borderColor: props.header.assistantImageBorderColor ?? "#000000", borderWidth: props.header.assistantImageBorderWidth ?? 1, borderStyle: props.header.assistantImageBorderStyle ?? "solid", borderRadius: props.header.assistantImageBorderRadius ?? 30, padding: 4, backgroundColor: props.header.assistantImageBackgroundColor ?? "#FFFFFF" }}>
                                    <Image style={{ height: 30, width: 30 }} source={{ uri: props.header.assistantImage }}/>
                                </View>}
                                <Text style={{ marginLeft: 8, color: props.header?.assistantNameTextColor ?? "#000000", fontSize: props.header?.assistantNameFontSize ?? 18, fontFamily: props.header?.assistantNameFontFamily, textAlign: 'center' }}>{props.header?.assistantName}</Text>
                            </View>
                            <TouchableOpacity style={{ borderRadius: 30, width: 30, height: 30, alignSelf: 'center' }} onPress={onClosePress}>
                                <Image style={{ height: 25, width: 25 }} source={{ uri: props.header?.closeAssistantButtonImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/a6de04bb-e572-4a55-8cd9-1a7628285829/delete-2.png" }}/>
                            </TouchableOpacity>
                        </View>
                        <View style={{ flex: 1, paddingTop: props.body?.paddingTop ?? 0, paddingLeft: props.body?.paddingLeft ?? 16, paddingRight: props.body?.paddingRight ?? 16, paddingBottom: props.body?.paddingBottom ?? 12, backgroundColor: props.body?.backgroundColor ?? "#FFFFFF", display: 'flex', flexDirection: 'column', borderTopColor: props.body?.borderTopColor ?? "#CBCCD2", borderTopWidth: props.body?.borderTopWidth ?? 1, borderBottomColor: props.body?.borderBottomColor ?? "#CBCCD2", borderBottomWidth: props.body?.borderBottomWidth ?? 1, borderStyle: props.body?.borderStyle ?? "solid" }}>
                            <ScrollView ref={scrollViewRef} onContentSizeChange={() => scrollViewRef.current.scrollToEnd({ animated: true })}>
                                <TouchableOpacity activeOpacity={1}>
                                    {messagesRef.current && messagesRef.current.map((message, idx) => {
                                        return (
                                            <View key={idx} style={{ marginTop: 16, display: 'flex', flexDirection: 'row', justifyContent: message.origin == 'Received' ? 'flex-start' : 'flex-end' }}>
                                                {message.origin == 'Received' &&
                                                    props.body?.assistantImage && <View style={{ maxHeight: 30, maxWidth: 30, borderColor: props.body.aassistantImageBorderColor ?? "#000000", borderWidth: props.body.assistantImageBorderWidth ?? 1, borderStyle: props.body.assistantImageBorderStyle ?? "solid", borderRadius: props.body.assistantImageBorderRadius ?? 30, padding: 4, backgroundColor: props.body.assistantImageBackgroundColor ?? "#FFFFFF", display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                                                        <Image style={{ height: 20, width: 20 }} source={{ uri: props.body.assistantImage }}/>
                                                    </View>}
                                                <View style={{ maxWidth: "85%", marginLeft: message.origin == 'Received' ? 8 : 0, marginTop: 16, backgroundColor: message.origin == 'Sent' ? props.body?.messageSentBackgroundColor ?? "rgba(0, 0, 0, 0.5)" : props.body?.messageReceivedBackgroundColor ?? "rgba(0, 0, 0, 0.05)", borderColor: message.origin == "Sent" ? props.body?.messageSentBorderColor ?? "transparent" : props.body?.messageReceivedBorderColor ?? "#CCCCCC", borderWidth: message.origin == 'Sent' ? props.body?.messageSentBorderWidth ?? 0 : props.body?.messageReceivedBorderWidth ?? 1, borderStyle: message.origin == 'Sent' ? props.body?.messageSentBorderStyle ?? "solid" : props.body?.messageReceivedBorderStyle ?? "solid", borderTopRightRadius: message.origin == 'Received' ? props.body?.messageReceivedBorderTopRightRadius ?? 8 : props.body?.messageSentBorderTopRightRadius ?? 0, borderTopLeftRadius: message.origin == 'Received' ? props.body?.messageReceivedBorderTopLeftRadius ?? 0 : props.body?.messageSentBorderTopLeftRadius ?? 8, borderBottomRightRadius: message.origin == 'Received' ? props.body?.messageReceivedBorderBottomRightRadius ?? 8: props.body?.messageSentBorderBottomRightRadius ?? 8, borderBottomLeftRadius: message.origin == 'Received' ? props.body?.messageReceivedBorderBottomLeftRadius ?? 8 : props.body?.messageSentBorderBottomLeftRadius ?? 8 , paddingRight: 16, paddingLeft: 16 }}>
                                                    <Markdown onLinkPress={onLinkPressed} style={{ text: { color: message.origin == 'Sent' ? props.body?.messageSentTextColor ?? "#FFFFFF" : props.body?.messageReceivedTextColor ?? "#000000", fontSize: message.origin == 'Sent' ? props.body?.messageSentFontSize ?? 16 : props.body?.messageReceivedFontSize ?? 16, fontFamily: message.origin == 'Sent' ? props.body?.messageSentFontFamily : props.body?.messageReceivedFontFamily } }} >{message.text}</Markdown>
                                                </View>
                                            </View>
                                        )
                                    })}
                                </TouchableOpacity>
                            </ScrollView>
                            <View style={{ display: 'flex', flexDirection: 'column' }}>
                                <ScrollView horizontal={true} showsHorizontalScrollIndicator={false}>
                                    {assistantHintsRef.current && assistantHintsRef.current.map((hint, idx) => {
                                        return (
                                            <TouchableOpacity onPress={() => { onHintClicked(hint) }} style={{ marginLeft: 8, marginTop: 16 }} key={idx}>
                                                <View style={{ backgroundColor: props.body?.hintsBackgroundColor ?? "#FFFFFF", paddingTop: props.body?.hintsPaddingTop ?? 12, paddingBottom: props.body?.hintsPaddingBottom ?? 12, paddingRight: props.body?.hintsPaddingRight ?? 12, paddingLeft: props.body?.hintsPaddingLeft ?? 12, borderWidth: props.body?.hintsBorderWidth ?? 1, borderColor: props.body?.hintsBorderColor ?? "#CCCCCC", borderStyle: props.body?.hintsBorderStyle ?? "solid", borderRadius: props.body?.hintsBorderRadius ?? 30}}>
                                                    <Text style={{ fontSize: props.body?.hintsFontSize ??  16, color: props.body?.hintsTextColor ?? "#8F97A1", fontFamily: props.body?.hintsFontFamily}}>{hint}</Text>
                                                </View>
                                            </TouchableOpacity>
                                        )
                                    })}
                                </ScrollView>
                            </View>
                        </View>
                    </View>}
                <View style={{ paddingLeft: props.toolBar?.paddingLeft ?? 20, paddingRight: props.toolBar?.paddingRight ?? 20, paddingTop: props.toolBar?.paddingTop ?? 12, paddingBottom: props.toolBar?.paddingBottom ?? 30, display: 'flex', flexDirection: 'column' }}>
                    <View>
                        {!assistantStateRef.current.includes('Conversation') &&
                            <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>
                                <Text style={{fontSize: props.toolBar?.drawerWelcomeFontSize ?? 18, fontFamily: props.toolBar?.drawerWelcomeTextFontFamily, color: props.toolBar?.drawerWelcomeTextColor ?? "#8F97A1", fontStyle: props.toolBar?.drawerWelcomeTextFontStyle ?? "italic", marginBottom: !isUsingSpeechRef.current ? 16 : 0 }}>{props.toolBar?.drawerWelcomeText}</Text>
                                <TouchableOpacity style={{ borderRadius: 30, width: 30, height: 30 }} onPress={onClosePress}>
                                    <Image style={{ height: 25, width: 25 }} source={{ uri: props.header?.closeAssistantButtonImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/a6de04bb-e572-4a55-8cd9-1a7628285829/delete-2.png"}}/>
                                </TouchableOpacity>
                            </View>}
                        {(isUsingSpeechRef.current) && <View>
                            <SpeakingAnimation color={props.toolBar?.equalizerColor ?? '#8F97A1'} isSpeaking={assistantStateRef.current.includes('Speaking')} style={{ marginTop: 35, justifyContent: 'center', display: 'flex', flexDirection: 'row' }}/>
                            {assistantIsListeningRef.current ? <Text style={{ alignSelf: 'flex-start', fontSize: props.toolBar?.assistantStateFontSize ?? 16, fontFamily: props.toolBar?.assistantStateFontFamily, marginTop: 24, fontStyle: props.toolBar?.assistantStateFontStyle ?? "italic", color: props.toolBar?.assistantStateTextColor ?? "#8F97A1" }}>Listening...</Text> :
                                assistantStateRef.current == 'Understood' ? <Text style={{ alignSelf: 'flex-start', fontSize: props.toolBar?.assistantStateFontSize ?? 16, fontFamily: props.toolBar?.assistantStateFontFamily, marginTop: 24, fontStyle: 'italic', color: props.toolBar?.assistantStateTextColor ?? "#8F97A1" }}>Processing...</Text> :
                                    assistantStateRef.current.includes('Try Again') ? <Text style={{ alignSelf: 'flex-start', fontSize: props.toolBar?.assistantStateFontSize ?? 16, fontFamily: props.toolBar?.assistantStateFontFamily, marginTop: 24, fontStyle: 'italic', color: props.toolBar?.assistantStateTextColor ?? "#8F97A1"}}>I didn't catch that...</Text> :
                                        <Text/>}

                            <View style={{ borderWidth: 1, borderStyle: 'solid', borderColor: "#FFFFFF", padding: 8, marginTop: (assistantIsListeningRef.current || assistantStateRef.current == 'Understood' || assistantStateRef.current.includes('Try Again')) ? 4 : 30, borderRadius: 10, backgroundColor: props.toolBar?.speechResultBoxBackgroundColor ?? "rgba(0, 0, 0, 0.5)"}}>
                                <Text style={{ fontSize: props.toolBar?.speechResultTextFontSize ?? 16, fontFamily: props.toolBar?.speechResultTextFontFamily, color: assistantState.includes('Speaking') ? props.toolBar?.partialSpeechResultTextColor ?? "rgba(255 , 255, 255, .2)" : props.toolBar?.fullSpeechResultTextColor  ?? "#FFFFFF"}}>{spokenText}</Text>
                            </View>
                        </View>}
                        {(assistantStateRef.current.includes('Conversation') && !isUsingSpeechRef.current) ? <View/> : <View style={{ marginTop: 16, borderWidth: 0.6, borderStyle: 'dashed', borderRadius: 1, borderColor: '#CBCCD2', }}/>}
                    </View>
                    <View style={{ display: 'flex', flexDirection: 'row', marginTop: (assistantStateRef.current.includes('Conversation') && !isUsingSpeechRef.current) ? 0 : 16 }}>
                        {props.useVoiceInput && <View style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                            <Text style={{ fontSize: props.toolBar?.speakFontSize ?? 12, fontFamily: props.toolBar?.speakFontFamily, color: isUsingSpeech ? props.toolBar?.speakActiveTitleColor ?? "#3E77A5" : props.toolBar?.speakInactiveTitleColor ?? "#8F97A1" }}>SPEAK</Text>
                            <View style={{ borderRadius: 25, padding: 4, backgroundColor: assistantIsListeningRef.current ? props.toolBar?.micActiveHighlightColor ?? "rgba(30, 126, 185, 0.12)" : props.toolBar?.micInactiveHighlightColor ?? "transparent", marginTop: 12 }}>
                                <TouchableOpacity onPress={onSpeechInputClicked}>
                                    <Image style={{ height: 40, width: 40 }} source={{ uri: isUsingSpeech ? props.toolBar?.micActiveImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/daca643f-6730-4af5-8817-8d9d0d9db0b5/mic-image.png" : props.toolBar?.micInactiveImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/3f10b6d7-eb71-4427-adbc-aadacbe8940e/mic-image-1-.png"}}/>
                                </TouchableOpacity>
                            </View>
                        </View>}
                        <View style={{ display: 'flex', flexDirection: 'column', flex: 1, marginLeft: props.useVoiceInput ? 16 : 0, height: props.useVoiceInput ? "auto" : 65 }}>
                            {props.useVoiceInput && <Text style={{ fontSize: props.toolBar?.typeFontSize ?? 12, fontFamily: props.toolBar?.typeFontFamily, color: !isUsingSpeech ? props.toolBar?.typeActiveTitleColor ?? "#3E77A5": props.toolBar?.typeInactiveTitleColor ?? "#8F97A1"}}>TYPE</Text>}
                            <View style={{ flex: 1, display: 'flex', flexDirection: 'row', backgroundColor: !isUsingSpeech ? props.toolBar?.textboxActiveHighlightColor ?? "rgba(30, 126, 185, 0.12)": props.toolBar?.textboxInactiveHighlightColor ?? "transparent", borderRadius: 10, paddingRight: 10, paddingLeft: 10, marginTop: 4 }}>
                                <TextInput value={inputText} onChangeText={setInputText} onTouchStart={onTextInputClicked} style={{ height: 45, color: props.toolBar?.textInputTextColor ?? "#8F97A1", borderBottomColor: props.toolBar?.textInputLineColor ?? "#8F97A1", borderBottomWidth: 1, flex: 1 }} selectionColor={props.toolBar?.textInputCursorColor ?? "#707174"} underlineColorAndroid={"transparent"}/>
                                <TouchableOpacity style={{ marginBottom: 8, marginLeft: 4 }} onPress={onSendPressed}>
                                    <Image style={{ height: 25, width: 25, marginTop: 20 }} source={{ uri: !isUsingSpeech ? props.toolBar?.sendActiveImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/7a39bc6f-eef5-4185-bcf8-2a645aff53b2/Send-3-.png" : props.toolBar?.sendInactiveImage ?? "https://voicify-prod-files.s3.amazonaws.com/99a803b7-5b37-426c-a02e-63c8215c71eb/0c5aa61c-7d6c-4272-abd2-75d9f5771214/Send-2-.png"}}/>
                                </TouchableOpacity>
                            </View>
                        </View>
                    </View>
                </View>
            </View>
        </Modal>
    )
}

