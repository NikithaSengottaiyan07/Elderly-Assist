import type { TTSData, TTSRequest } from "../models/customAssistantApiModels";
import type VoicifyTextToSpeechProvider from './VoicifyTextToSpeechProvider';
import Sound from 'react-native-sound'
type LinkedUrls = {
    src?: string
    next?: LinkedUrls
}
export class ReactNativeSoundTTSProvider implements VoicifyTextToSpeechProvider {
    settings: VoicifyTextToSpeechSettings
    audioPlayer?: Sound
    speechEndHandlers: (() => void)[] = []
    cancel?: boolean

    constructor(settings: VoicifyTextToSpeechSettings) {
        this.settings = settings;
    }

    initialize(locale: string) {
        this.settings.locale = locale
    }
    createLinkedList(src: TTSData[]) {
        let top: LinkedUrls = {};
        for (let i = src.length - 1; i >= 0; i--) {
            if (i == src.length - 1) {
                top = {
                    src: src[i].url,
                    next: {}
                }
            }
            else {
                let temp = {
                    src: src[i].url,
                    next: top
                };
                top = temp;
            }
        }
        return top;
    }
    playNext(linkedSrc: LinkedUrls)
    {
        this.audioPlayer = new Sound(linkedSrc.src, "", (error) => {
            if (error) {
                return;
            }
            if (this.audioPlayer) {
                if(!this.cancel)
                {
                    this.audioPlayer.play((success: any) => {
                        if (success) {
                            if(linkedSrc.next?.src)
                            {
                                this.playNext(linkedSrc.next)
    
                            }
                            else
                            {
                                this.speechEndHandlers?.forEach(handle => handle());
                            }
                        }
                    });
                }
            }
        });
        
    }
    async speakSsml(ssml: string) {
        let linkedLists: LinkedUrls = {}
        const ssmlUri = await this.ssmlToSpeech(ssml)
        if (ssmlUri) {
            linkedLists = this.createLinkedList(ssmlUri)
        }
        if (linkedLists) {
            this.playNext(linkedLists)
        }
    }

    async stop() {
        if (this.audioPlayer) {
            this.audioPlayer.stop()
        }
    }

    async ssmlToSpeech(ssml: string) {
        try {
            const textToSpeechRequest = this.generateTTSRequest(ssml);
            const result = await fetch(`${this.settings.serverRootUrl}/api/Ssml/toSpeech/${this.settings.provider}`, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(textToSpeechRequest)
            });
            if (result.status == 200) {
                const response = await result.json() as TTSData[];
                return (response)
            }
            else {
                return null
            }
        }
        catch (e: any) {
            return null;
        }
    }

    generateTTSRequest(ssml: string): TTSRequest {
        const request: TTSRequest = {
            applicationId: this.settings.appId,
            applicationSecret: this.settings.appKey,
            ssmlRequest: {
                ssml: ssml,
                locale: this.settings.locale,
                voice: this.settings.voice
            }
        }
        return (request)
    }

    addFinishListener(callback: () => void) {
        this.speechEndHandlers?.push(callback);
    }

    clearHandlers() {
        this.speechEndHandlers = []
    }
}

export interface VoicifyTextToSpeechSettings {
    appId: string
    appKey: string
    locale: string
    voice: string
    serverRootUrl: string
    provider: 'Google' | 'Polly'
}

